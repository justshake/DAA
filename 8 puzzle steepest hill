from queue import PriorityQueue

def find_blank(puzzle):
    for i in range(3):
        for j in range(3):
            if puzzle[i][j] == 0:
                return i, j

def heuristic(state):
    count=0
    goal=[[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    for i in range(3):
        for j in range(3):
            if state[i][j]!=goal[i][j]:
                count +=1
    return count

def is_goal(state):
    return state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def generate_moves(state):
    moves = []
    row, col = find_blank(state)
    if row > 0:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row-1][col] = new_state[row-1][col], new_state[row][col]
        moves.append(new_state)
    if row < 2:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row+1][col] = new_state[row+1][col], new_state[row][col]
        moves.append(new_state)
    if col > 0:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row][col-1] = new_state[row][col-1], new_state[row][col]
        moves.append(new_state)
    if col < 2:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row][col+1] = new_state[row][col+1], new_state[row][col]
        moves.append(new_state)
    
    return moves

def steepest_hill_climbing(start):
    current_state = start
    current_cost = heuristic(start)
    while True:
        print("Current state:")
        for row in current_state:
            print(row)
        print("Cost:", current_cost)
        print()
        best_move = None
        best_cost = float('inf')
        for move in generate_moves(current_state):
            move_cost = heuristic(move)
            if move_cost < best_cost:
                best_move = move
                best_cost = move_cost
        if best_cost >= current_cost:
            return current_state
        current_state = best_move
        current_cost = best_cost

initial_state = [[1, 2, 3], [4, 0, 5], [7, 8, 6]]
solution = steepest_hill_climbing(initial_state)
print("Solution found:")
for row in solution:
    print(row)
